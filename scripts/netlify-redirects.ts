import { readdir } from 'node:fs/promises'
import { join, dirname } from 'node:path'
import { writeFile } from 'node:fs/promises'
import { fileURLToPath } from 'node:url'

const githubRepoUrl = 'https://github.com/markusritschel/slides'

interface Redirect {
  from: string
  to: string
  status: number
}

async function hasSubdirectory(dir: string, subdir: string): Promise<boolean> {
  try {
    await readdir(join(dir, subdir))
    return true
  } catch {
    return false
  }
}

async function generateRedirects() {
  // const slidesDir = join(process.cwd(), 'slides')
  const slidesDir = join(process.cwd(), 'slides')
  const allPresentations = await readdir(slidesDir)
  const redirects: Redirect[] = []

  // Filter to only include directories that have a src subdirectory
  const presentations: string[] = []
  for (const presentation of allPresentations) {
    if (await hasSubdirectory(join(slidesDir, presentation), 'src')) {
      presentations.push(presentation)
    }
  }
  

  // Add build configuration
  const config = `#
# This file is auto-generated by executing \`npm run update\` in the root.
#

[build]
publish = "dist"
command = "pnpm run build"

[build.environment]
NODE_VERSION = "22"
PLAYWRIGHT_BROWSERS_PATH = "0"

[[headers]]
for = "/*"
  [headers.values]
  X-Frame-Options = "DENY"
  X-XSS-Protection = "1; mode=block"
  Cache-Control = "public, max-age=3600"

[[headers]]
for = "/*.{js,css,woff2,jpg,jpeg,png,gif,ico}"
  [headers.values]
  Cache-Control = "public, max-age=31536000, immutable"

[[redirects]]
from = "/"
to = "https://slides.markusritschel.de/"
status = 301

`

  // Process each presentation
  for (const presentation of presentations) {
    const [date, ...nameParts] = presentation.split('_')
    const name = nameParts.join('-').toLowerCase()
    const urlPath = `/${presentation}`
    const pdfName = `${presentation}.pdf`

    // Add redirect for PDF
    redirects.push(
      {
        from: `${urlPath}/pdf`,
        to: `${githubRepoUrl}/blob/main/slides/${presentation}/${pdfName}?raw=true`,
        status: 302,
      },
    )

    // Add redirect for source files
    redirects.push({
      from: `${urlPath}/src`,
      to: `${githubRepoUrl}/tree/main/slides/${presentation}`,
      status: 302,
    })

    // Add exact match for the presentation root
    redirects.push({
      from: `${urlPath}/*`,
      to: `${urlPath}/index.html`,
      status: 200,
    })

    // Add HTML5 fallback for client-side routing and assets
    // redirects.push({
    //   from: `${urlPath}/*`,
    //   to: `${urlPath}/src/dist/:splat`,
    //   status: 200,
    // })
  }

  // Generate netlify.toml content
  const netlifyConfig = redirects.reduce((acc, redirect) => {
    return acc + `
[[redirects]]
from = "${redirect.from}"
to = "${redirect.to}"
status = ${redirect.status}
`
  }, config)

  // Write to file
  await writeFile(join(process.cwd(), 'netlify.toml'), netlifyConfig)
}

generateRedirects().catch(console.error)
